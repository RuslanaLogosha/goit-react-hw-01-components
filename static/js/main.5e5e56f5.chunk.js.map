{"version":3,"sources":["components/Profile/profile.js","components/Statistics/statistics.js","components/FriendList/FriendListItem.js","components/FriendList/friendList.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","props","name","avatar","tag","location","stats","followers","views","likes","class","src","alt","defaultProps","Statistics","title","map","stat","label","percentage","id","FriendListItem","isOnline","width","FriendList","friends","friend","App","user","statisticalData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0zCAEMA,G,MAAU,SAACC,GAAW,IACjBC,EAAiED,EAAjEC,KAAMC,EAA2DF,EAA3DE,OAAQC,EAAmDH,EAAnDG,IAAKC,EAA8CJ,EAA9CI,SADH,EACiDJ,EAApCK,MAAQC,EADrB,EACqBA,UAAWC,EADhC,EACgCA,MAAOC,EADvC,EACuCA,MAC9D,OACF,sBAAKC,MAAM,UAAX,UACA,sBAAKA,MAAM,cAAX,UACE,qBACEC,IAAKR,EACLS,IAAKV,EACLQ,MAAM,WAER,mBAAGA,MAAM,OAAT,SAAiBR,IACjB,oBAAGQ,MAAM,MAAT,cAAiBN,KACjB,mBAAGM,MAAM,WAAT,SAAqBL,OAGvB,qBAAIK,MAAM,QAAV,UACE,+BACE,sBAAMA,MAAM,QAAZ,uBACF,sBAAMA,MAAM,WAAZ,SAAwBH,OAExB,+BACE,sBAAMG,MAAM,QAAZ,mBACF,sBAAMA,MAAM,WAAZ,SAAwBF,OAExB,+BACE,sBAAME,MAAM,QAAZ,mBACF,sBAAMA,MAAM,WAAZ,SAAwBD,eAO5BT,EAAQa,aAAe,CACnBV,OACE,+EAWSH,Q,OCnBAc,EA1BG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,MACvB,OACA,0BAASI,MAAM,aAAf,UACCK,GAAS,oBAAIL,MAAM,QAAV,SAAmBK,IAE7B,oBAAIL,MAAM,YAAV,SACKJ,EAAMU,KAAI,SAAAC,GAAI,OACjB,qBAAIP,MAAM,OAAV,UACE,sBAAMA,MAAM,QAAZ,SAAqBO,EAAKC,QAC1B,sBAAMR,MAAM,aAAZ,SAA0BO,EAAKE,eAFXF,EAAKG,a,OCQlBC,EAhBQ,SAAC,GAA8B,IAA7BlB,EAA4B,EAA5BA,OAAQD,EAAoB,EAApBA,KAAMoB,EAAc,EAAdA,SACnC,OACJ,gCACI,sBAAMZ,MAAM,SAAZ,SAAsBY,IACtB,qBAAKZ,MAAM,SAASC,IAAKR,EAAQS,IAAKV,EAAMqB,MAAM,OAClD,mBAAGb,MAAM,OAAT,SAAiBR,QCoBNsB,EAxBG,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAChB,OACI,oBAAIf,MAAM,cAAV,SACKe,EAAQT,KAAI,SAAAU,GAAM,OACf,oBAAIhB,MAAM,OAAV,SACI,cAAC,EAAD,CACAP,OAAQuB,EAAOvB,OACfD,KAAMwB,EAAOxB,KACboB,SAAUI,EAAOJ,YAJCI,EAAON,U,OCI9B,SAASO,IACtB,OACE,gCACE,cAAC,EAAD,CACAzB,KAAM0B,EAAK1B,KACXE,IAAKwB,EAAKxB,IACVC,SAAUuB,EAAKvB,SACfF,OAAQyB,EAAKzB,OACbG,MAAOsB,EAAKtB,QAEZ,cAAC,EAAD,CAAYS,MAAM,eAAeT,MAAOuB,IACxC,cAAC,EAAD,CAAYvB,MAAOuB,IACnB,cAAC,EAAD,CAAYJ,QAASA,OCvB3B,IAYeK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACd,EAAD,MAEFe,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e5e56f5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Profile = (props) => {\n    const {name, avatar, tag, location, stats: {followers, views, likes}} = props;\n    return (\n  <div class=\"profile\">\n  <div class=\"description\">\n    <img\n      src={avatar}\n      alt={name}\n      class=\"avatar\"\n    />\n    <p class=\"name\">{name}</p>\n    <p class=\"tag\">@{tag}</p>\n    <p class=\"location\">{location}</p>\n  </div>\n\n  <ul class=\"stats\">\n    <li>\n      <span class=\"label\">Followers</span>\n    <span class=\"quantity\">{followers}</span>\n    </li>\n    <li>\n      <span class=\"label\">Views</span>\n    <span class=\"quantity\">{views}</span>\n    </li>\n    <li>\n      <span class=\"label\">Likes</span>\n    <span class=\"quantity\">{likes}</span>\n    </li>\n  </ul>\n</div>\n    );\n};\n\nProfile.defaultProps = {\n    avatar:\n      'https://dummyimage.com/640x480/2a2a2a/ffffff&text=Product+image+placeholder',\n  };\n\nProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  stats: PropTypes.object.isRequired,\n}\n  \nexport default Profile;","import PropTypes from 'prop-types';\n\n\nconst Statistics =({title, stats})=> {\n    return (\n    <section class=\"statistics\">\n    {title && <h2 class=\"title\">{title}</h2>}\n  \n    <ul class=\"stat-list\">\n        {stats.map(stat => (\n      <li class=\"item\" key={stat.id}>\n        <span class=\"label\">{stat.label}</span>\n        <span class=\"percentage\">{stat.percentage}</span>\n      </li>\n        ))}\n    </ul>\n  </section>\n  );\n};\n\n\nStatistics.propTypes = {\n    stats: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n        })\n    )\n};\n\nexport default Statistics;","import PropTypes from 'prop-types';\n\nconst FriendListItem = ({avatar, name, isOnline}) => {\n    return (\n<div>\n    <span class=\"status\">{isOnline}</span>\n    <img class=\"avatar\" src={avatar} alt={name} width=\"48\" />\n    <p class=\"name\">{name}</p>\n</div>\n    )\n}\n\nFriendListItem.propTypes = {\n    avatar: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    isOnline: PropTypes.bool.isRequired,\n};\n\nexport default FriendListItem;","import PropTypes from 'prop-types';\nimport FriendListItem from './FriendListItem';\n\nconst FriendList =({friends}) => {\n    return (\n        <ul class=\"friend-list\">\n            {friends.map(friend => (\n                <li class=\"item\" key={friend.id}>\n                    <FriendListItem\n                    avatar={friend.avatar}\n                    name={friend.name}\n                    isOnline={friend.isOnline}\n                    />\n                </li>\n            ))}\n       </ul>\n    )\n}\n\nFriendList.propTypes = {\n    friends: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n      }),\n    ),\n  };\n\nexport default FriendList;","import Profile from \"./components/Profile/profile\";\nimport user from './components/Profile/user.json';\n\nimport Statistics from './components/Statistics/statistics';\nimport statisticalData from './components/Statistics/statistical-data.json';\n\nimport FriendList from './components/FriendList/friendList';\nimport friends from './components/FriendList/friends.json';\n\n\n\nexport default function App() {\n  return (\n    <div>\n      <Profile \n      name={user.name}\n      tag={user.tag}\n      location={user.location}\n      avatar={user.avatar}\n      stats={user.stats}\n      />\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n      <Statistics stats={statisticalData} />\n      <FriendList friends={friends} />\n    </div> \n\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}